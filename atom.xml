<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ninjagg.github.io/Xuan.github.io/</id>
    <title>Gridea</title>
    <updated>2021-04-17T03:00:44.935Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ninjagg.github.io/Xuan.github.io/"/>
    <link rel="self" href="https://ninjagg.github.io/Xuan.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://ninjagg.github.io/Xuan.github.io/images/avatar.png</logo>
    <icon>https://ninjagg.github.io/Xuan.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Conda Collecting package metadata (current_repodata.json): failed 解决方法]]></title>
        <id>https://ninjagg.github.io/Xuan.github.io/post/conda-collecting-package-metadata-current_repodatajson-failed-jie-jue-fang-fa/</id>
        <link href="https://ninjagg.github.io/Xuan.github.io/post/conda-collecting-package-metadata-current_repodatajson-failed-jie-jue-fang-fa/">
        </link>
        <updated>2021-04-16T11:37:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="问题背景">问题背景</h1>
<p>conda重置，设置清华源、中科大源都无法解决<code>conda install mamba</code>时的Collecting package metadata (current_repodata.json): failed</p>
<h1 id="解决方法">解决方法</h1>
<p>考虑可能是默认源问题，删除~/.condarc文件最下面的defaults后可以正常使用。但还有可能报错（并不是每次都有）failed with initial frozen solve. Retrying with flexible solve.该错误不影响执行。</p>
<p>也可以通过以下设置解决（本次没设置）：<code>conda config --set channel_priority flexible</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[mac本地安装cufflinks 2.1.1 tar.gz文件]]></title>
        <id>https://ninjagg.github.io/Xuan.github.io/post/mac-ben-di-an-zhuang-cufflinks-211-targz-wen-jian-conda-mei-you/</id>
        <link href="https://ninjagg.github.io/Xuan.github.io/post/mac-ben-di-an-zhuang-cufflinks-211-targz-wen-jian-conda-mei-you/">
        </link>
        <updated>2021-04-12T12:03:55.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-问题背景">① 问题背景</h1>
<h3 id="cuffdiff-221版本python27-对hisat2的mapping后bam文件数据处理时报错segmentation-fault-11-据说是火星撞地球级别的错误报告尝试几乎所有方法和参数无法起效">cuffdiff 2.2.1版本(python=2.7) 对hisat2的mapping后bam文件数据处理时报错：Segmentation fault: 11 据说是&quot;火星撞地球&quot;级别的错误报告，尝试几乎所有方法和参数无法起效</h3>
<p><img src="https://ninjagg.github.io/Xuan.github.io//post-images/1618229859018.png" alt="error" loading="lazy"><br>
<img src="https://ninjagg.github.io/Xuan.github.io//post-images/1618229884767.png" alt="error code" loading="lazy"></p>
<h1 id="2-解决方法">② 解决方法</h1>
<h3 id="安装cufflinks-211版本即解决该问题python379但conda上并没有cufflinks-211版本因此在cufflinks官网下载该软件cufflinks-211osx_x86_64targz">安装cufflinks 2.1.1版本即解决该问题(python=3.7.9)，但conda上并没有cufflinks 2.1.1版本，因此在<a href="http://cole-trapnell-lab.github.io/cufflinks/releases/v2.1.1/">cufflinks官网</a>下载该软件&quot;cufflinks-2.1.1.OSX_x86_64.tar.gz&quot;</h3>
<pre><code>cd ~/test_HD/biosofts
tar -zxvf cufflinks-2.1.1.OSX_x86_64.tar.gz
cd cufflinks-2.1.1.OSX_x86_64
vim ~/.bash_profile
</code></pre>
<h3 id="在行末添加一行">在行末添加一行</h3>
<pre><code>export PATH=//Users/mac/test_HD/biosofts/cufflinks-2.1.1.OSX_x86_64:$PATH
source ~/.bash_profile #重启bash文件 环境变量即生效
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[t-test检验 & Venn作图]]></title>
        <id>https://ninjagg.github.io/Xuan.github.io/post/t-test-jian-yan/</id>
        <link href="https://ninjagg.github.io/Xuan.github.io/post/t-test-jian-yan/">
        </link>
        <updated>2021-03-19T10:48:52.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一实验分组-con-uvb-treatment">一：实验分组 CON UVB TREATMENT</h1>
<p>质谱检测各组蛋白表达量，可采用ANOVA或t-test两两检验<br>
本次采用t-test检验 CON vs. UVB &amp; UVB vs. TREATMENT 后取显著性差异结果交集，进一步根据Fold Change情况阐述相应生物学意义</p>
<h1 id="二r代码">二：R代码</h1>
<pre><code>####load package####
library(tidyverse)
library(readxl)
library(VennDiagram)
library(writexl)

####读取数据并清洗####
rm(list = ls())
raw_data &lt;- read_excel(path = &quot;01_2020-125-C-01 original data 原始数据.xlsx&quot;)
df &lt;- as.data.frame(t(raw_data)) #t()转置后是matrix需要as.data.frame转为数据框
colnames(df) &lt;- as.character(df[1, ]) #更换列名
df_clean &lt;- df[-1, ] #删掉第一行(原列名)

####t-test####
1:3列是Con组数据 4:6是UVB组数据 7:9是Treatment 

##############CON vs UVB
##检测方差是否齐 基本都齐
##自己造轮子进行批量方差齐性检验 ①创建一个列表 ②定义 i 是&quot;行数&quot; ③对con(1:3) vs. uvb(4:6) &amp; uvb(4:6) vs. treatment(7:9)进行检测 

con_u_var &lt;- list() #创建一个列表
for (i in c(1:length(rownames(df_clean)))) {
    result &lt;- var.test(as.numeric(df_clean[i, 1:3]), as.numeric(df_clean[i, 4:6]))
    con_u_var[[i]] &lt;- result[[3]]
} #定义i是&quot;行数&quot;，var.test()返回一个列表其中[[3]]是方差检验的数值(大于0.05方差齐)，将每一行(每一个观测/蛋白)的方差检验结果赋值给变量&quot;result&quot;，将结果中的方差检验数值赋值给con_u_var，顺序与行名对应

##t-test
con_u_t_test &lt;- list()
for (i in c(1:length(rownames(df_clean)))) {
    result &lt;- t.test(as.numeric(df_clean[i, 1:3]), as.numeric(df_clean[i, 4:6]), var.equal = T)
    con_u_t_test[[i]] &lt;- result[[3]]
}

##############UVB vs Treatment
##检查方差
uvb_a_mg_var &lt;- list()
for (i in c(1:length(rownames(df_clean)))) {
  result &lt;- var.test(as.numeric(df_clean[i, 4:6]), as.numeric(df_clean[i, 7:9]))
  uvb_a_mg_var[[i]] &lt;- result[[3]]
}

##t-test
uvb_a_mg_t_test &lt;- list()
for (i in c(1:length(rownames(df_clean)))) {
  result &lt;- t.test(as.numeric(df_clean[i, 4:6]), as.numeric(df_clean[i, 7:9]), var.equal = T)
  uvb_a_mg_t_test[[i]] &lt;- result[[3]]
}

####计算均值 检测fold change####
##CON组
temp_mean_con &lt;- vector()
for (i in c(1:length(rownames(df_clean)))) {
  test &lt;- mean(as.numeric(df_clean[i, 1:3]))
  temp_mean_con[i] &lt;- test
}

##UVB组
temp_mean_UVB &lt;- vector()
for (i in c(1:length(rownames(df_clean)))) {
  test2 &lt;- mean(as.numeric(df_clean[i, 4:6]))
  temp_mean_UVB[i] &lt;- test2
}

##Treatment组
temp_mean_a_mg &lt;- vector()
for (i in c(1:length(rownames(df_clean)))) {
  test3 &lt;- mean(as.numeric(df_clean[i, 7:9]))
  temp_mean_a_mg[i] &lt;- test3
}

####整理结果，写出文件####
df_end &lt;- df_clean %&gt;%
  mutate(P_con_vs_u = signif(as.numeric(con_u_t_test)), 
         P_uvb_vs_a_mg = signif(as.numeric(uvb_a_mg_t_test)),
         FC_con_U = temp_mean_UVB / temp_mean_con,
         FC_UVB_a_mg = temp_mean_a_mg / temp_mean_UVB)
rownames(df_end) &lt;- rownames(df_clean)
write.csv(df_end, file = &quot;./outcome_all_data.csv&quot;, row.names = T)
write.tabel(df_end, file = &quot;./outcome_all_data_test&quot;) #写出\t分隔的txt文件，再次读入时不会存在行名变化问题csv会存在部分问题不知是不是bug

####筛选结果####
all_temp &lt;- df_end %&gt;%   #筛选CON vs. UVB &amp; UVB vs. Treatment组中均显著的蛋白
  filter(P_con_vs_u &lt; 0.05 &amp; P_uvb_vs_a_mg &lt; 0.05)
write.csv(all_temp, file = &quot;./outcome_intersection.csv&quot;) ###写出数据

con_u_temp &lt;- df_end %&gt;% #筛选CON vs. UVB 单显著 cutoff == 0.05 
  filter(P_con_vs_u &lt; 0.05)
write.csv(all_temp, file = &quot;./outcome_con_vs_uvb.csv&quot;) ###写出数据

u_a_mg_temp &lt;- df_end %&gt;% #筛选UVB vs. Treatmen cutoff == 0.05 
  filter(P_uvb_vs_a_mg &lt; 0.05)
write.csv(all_temp, file = &quot;./outcome_uvb_vs_a_mg.csv&quot;) ###写出数据

####Venn图绘制####
all_name &lt;- as.character(rownames(all_temp))
con_u_name &lt;- as.character(rownames(con_u_temp))
uvb_a_mg_name &lt;- as.character(rownames(u_a_mg_temp))
venn.plot &lt;- venn.diagram(list(&quot;A&quot; = con_u_name, &quot;B&quot; = uvb_a_mg_name),
             filename = &quot;venn.tiff&quot;, 
             fill=c(&quot;red&quot;,&quot;blue&quot;),
             lty = 1, #圆轮廓线种类：实线、点虚线……
             lwd = 1, #圆轮廓线宽度
             col = &quot;black&quot;,
             cat.col = &quot;black&quot;,
             alpha=c(0.6,0.6),
             cat.cex = 1.5, #圆的分组名大小
             cat.fontface = &quot;bold&quot;,
             margin = 0.07,
             ext.text = F, ####区域过小时不允许外界标签，就没有黑色直线了
             cex = 1.5 ) ##圆内数字大小


</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[基于TCGA的单基因survival analysis]]></title>
        <id>https://ninjagg.github.io/Xuan.github.io/post/ji-yu-tcga-de-dan-ji-yin-survival-analysis/</id>
        <link href="https://ninjagg.github.io/Xuan.github.io/post/ji-yu-tcga-de-dan-ji-yin-survival-analysis/">
        </link>
        <updated>2021-03-18T12:17:20.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一确定基因名字">一：确定基因名字</h1>
<p>基因的名字很多，登录<a href="https://ninjagg.github.io/Xuan.github.io//post-images/1616070388162.png">Uniprot</a></p>
<h1 id="二疾病">二：疾病</h1>
<p>以结直肠癌为例</p>
<h1 id="三tcga基因表达以及临床生存信息下载">三：TCGA&quot;基因表达&quot;以及&quot;临床生存信息&quot;下载：</h1>
<p><a href="https://xenabrowser.net/datapages/">UCSC Xena</a><br>
<img src="https://ninjagg.github.io/Xuan.github.io//post-images/1616071647107.png" alt="" loading="lazy"><br>
&quot;基因表达&quot;数据下载：<br>
<img src="https://ninjagg.github.io/Xuan.github.io//post-images/1616071773525.png" alt="" loading="lazy"><br>
<img src="https://ninjagg.github.io/Xuan.github.io//post-images/1616071809308.png" alt="" loading="lazy"><br>
&quot;临床生存信息&quot;下载：<br>
<img src="https://ninjagg.github.io/Xuan.github.io//post-images/1616071883082.png" alt="" loading="lazy"><br>
下载后放到R的工作目录中即可</p>
<h1 id="四r代码survival-analysis">四：R代码survival analysis</h1>
<pre><code>rm(list = ls())

####load package####
library(tidyverse)

####读取数据####
gene_exp &lt;- read.table(file = &quot;./TCGA.COAD.sampleMap%2FHiSeqV2&quot;, header = T, sep = &quot;\t&quot;)

####gene_expression数据清洗####
rownames(gene_exp) &lt;- gene_exp[ ,1] #第一列是Sample，将第一列作为行名
gene_exp &lt;- gene_exp[ ,-1] #删掉原本第一列Sample的数据

####得到基因KIAA1324在各个样本中的表达数据####
GENE &lt;- as.data.frame(t(gene_exp)) #t()转置之后是matrix 需要转换
temp &lt;- rownames(GENE) == &quot;KIAA1324&quot; #筛选，基因的名字(Gene names)都试一试
GENE2 &lt;- GENE[temp, ]
GENE &lt;- GENE2 #防止变量弄混
GENE &lt;- as.data.frame(t(GENE)) #让&quot;临床分组&quot;变为观测，&quot;基因名&quot;为变量

####计算基因&quot;KIAA1324&quot;表达量中位数####
med &lt;- median(GENE$KIAA1324)

####筛选基因高低表达####
high &lt;- GENE$KIAA1324 &gt; med
low &lt;- GENE$KIAA1324 &lt;= med
GENE[high, ] &lt;- &quot;High&quot;
GENE[low, ] &lt;- &quot;Low&quot;

####获取临床####
clinical &lt;- read.table(file = &quot;./survival%2FCOAD_survival.txt&quot;, header = T, sep = &quot;\t&quot;)

####clinical数据清洗####
clinical_clean &lt;- data.frame(gsub(&quot;-&quot;, &quot;.&quot;, clinical$Sample), clinical) #将行名中连接的&quot;-&quot;换为&quot;.&quot;
colnames(clinical_clean[1]) &lt;- &quot;SampleID&quot; #修改列&quot;名字&quot;
clinical_clean_2 &lt;- clinical_clean[ ,-2] #删除原列&quot;名字&quot;

####合并基因表达及临床数据####
gene_clinical &lt;- data.frame(clinical_clean_2[match(rownames(GENE), clinical_clean_2$SampleID), ], GENE)

####&quot;KIAA1324&quot;低表达为1，高表达为2####
gene_clinical$KIAA1324 &lt;- ifelse((gene_clinical$KIAA1324 == &quot;Low&quot;), 1, 2)
GC &lt;- gene_clinical

##################生存分析作图 OS作图####
library(survival)
fit.surv &lt;- Surv(GC$OS.time, GC$OS)
km &lt;- survfit(fit.surv~1, data = GC)
km_2 &lt;- survfit(fit.surv~KIAA1324, data = GC)

library(survminer)
ggsurvplot(km_2,
legend.title = &quot;KIAA1324&quot;, #改变图例名称
legend.labs = c(&quot;High&quot;, Low&quot;),
pval = T #显示P值
)

##################生存分析作图 OS作图####
library(survival)
fit.surv &lt;- Surv(GC$PFI.time, GC$PFI)
km &lt;- survfit(fit.surv~1, data = GC)
km_2 &lt;- survfit(fit.surv~KIAA1324, data = GC)

library(survminer)
ggsurvplot(km_2,
legend.title = &quot;KIAA1324&quot;, #改变图例名称
legend.labs = c(&quot;High&quot;, &quot;Low&quot;),
pval = T #显示P值
)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mac上安装Aspera步骤]]></title>
        <id>https://ninjagg.github.io/Xuan.github.io/post/mac-shang-an-zhuang-aspera-bu-zou/</id>
        <link href="https://ninjagg.github.io/Xuan.github.io/post/mac-shang-an-zhuang-aspera-bu-zou/">
        </link>
        <updated>2021-03-15T07:28:28.000Z</updated>
        <content type="html"><![CDATA[<h1 id="1-下载aspera">1. 下载Aspera</h1>
<h2 id="谷歌浏览器也可安装图形界面本次安装使用命令行界面">谷歌浏览器也可安装图形界面（本次安装使用命令行界面）</h2>
<pre><code>cd /Users/mac/test_HD/biosofts
wget https://d3gcli72yxqn2z.cloudfront.net/connect_latest/v4/bin/IBMAsperaConnectInstallerOneClick-3.11.1.58.dmg
</code></pre>
<h1 id="2-安装aspera">2. 安装Aspera</h1>
<h2 id="图形界面中">图形界面中</h2>
<p>直接在/Users/mac/test_HD/biosofts中双击XXX.dmg文件，后拖到Application即可</p>
<h2 id="命令行界面中">命令行界面中</h2>
<h4 id="如果是dmg文件"><em>如果是.dmg文件</em></h4>
<p>.dmg文件会安装到/Volumes下</p>
<pre><code>cd /Users/mac/test_HD/biosofts
hdiutil attach xxx.dmg
cp -rf ./xxx.app /Applications
</code></pre>
<h4 id="如果是pkg文件"><em>如果是.pkg文件</em></h4>
<pre><code>cd /Users/mac/test_HD/biosofts
sudo installer -pkg xxx.pkg -target /Application
</code></pre>
<h4 id="如果是configsh文件"><em>如果是.config/.sh文件</em></h4>
<p>则运行对应文件</p>
<h1 id="2-将aspera-connect添加到环境变量中">2. 将Aspera Connect添加到环境变量中</h1>
<p>Aspera Connect安装完</p>
<pre><code>cd ~
vim .bash_profile
</code></pre>
<p>添加环境变量<br>
<code>PATH=/Users/mac/Applications/Aspera_Connect.app/Contents/Resources:$PATH</code><br>
保存退出，重新打开terminal</p>
<h1 id="3-关闭mac防火墙本机已关闭">3. 关闭Mac防火墙（本机已关闭）</h1>
<h1 id="4-aspera万能使用语句">4. Aspera万能使用语句</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[生信群知识整理 2020.12.04 to 2021.02.21]]></title>
        <id>https://ninjagg.github.io/Xuan.github.io/post/sheng-xin-qun-zhi-shi-zheng-li/</id>
        <link href="https://ninjagg.github.io/Xuan.github.io/post/sheng-xin-qun-zhi-shi-zheng-li/">
        </link>
        <updated>2021-03-15T00:36:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="20201204-to-20210218">2020.12.04 to 2021.02.18</h1>
<h1 id="homer">homer</h1>
<p>可以根据一段DNA序列预测其转录因子在bioconda中搜索homer，可以看到有很多种版本<br>
<code>conda search homer -c bioconda</code></p>
<h1 id="默认安装-homer-最新版">默认安装 homer 最新版</h1>
<p><code>conda install -c bioconda homer -y</code>  -y 表示直接安装，不询问确认与否</p>
<h1 id="deeptools">deepTools</h1>
<p>deepTools is a suite of python tools particularly developed for the efficient analysis of high-throughput sequencing data, such as ChIP-seq, RNA-seq or MNase-seq. 可以绘制甲基化的图片结果 可以绘制增强子的热图</p>
<h1 id="starbase-targetscan-miranda">starbase targetscan miRanda</h1>
<p>#可以根据原有序列进行匹配，寻找靶向的非编码RNA或mRNA</p>
<h1 id="axel">axel</h1>
<p>wget curl虽然支持断点续传但是单线程下载速度不快，可以换用axel，迅雷最好用！</p>
<p>mac （本次使用）<br>
<code>brew install axel</code><br>
简单使用 axel -n 10 http://www.kernel.org/pub/linux/kernel/v2.6/patch-2.6.39.gz</p>
<p>Debian<br>
<code>apt-get install axel</code></p>
<p>Fedora<br>
<code>yum install axel</code></p>
<h1 id="不同批次数据是否可以合并">不同批次数据是否可以合并</h1>
<p>①采用PCA分析看有无批次效应<br>
②一般QIIME参数一致table可以合并，QIIME是一个从原始DNA测序数据执行微生物组分析的开源生物信息学管道。QIIME旨在通过发布高质量的图表和统计数据，从Illumina或其他平台上生成的原始测序数据中获取用户。这包括多路分解和质量过滤、OTU挑选、分类分配、系统发育重建、多样性分析和可视化。QIIME已被应用于基于数万个样本中数十亿个序列的研究。</p>
<h1 id="supplement-material-下载">Supplement material 下载</h1>
<p>可以用wget或迅雷，axel会更快，idm（收费软件，需要寻找破解版）会更快</p>
<h1 id="tcga-biolinks">TCGA biolinks</h1>
<p>R包 整理临床数据 （实际使用UCSC.xena但是网站有时候有问题）</p>
<h1 id="ggplot坐标轴截断">ggplot坐标轴截断</h1>
<p><code>library(gg.gap)</code> 或手动坐标轴截断</p>
<h1 id="下载sra数据">下载SRA数据</h1>
<p><code>prefetch SRRXXXX</code></p>
<h1 id="服务器没有管理员权限">服务器没有管理员权限</h1>
<p>先安装底层lib 再安装缺少的R包<br>
<code>conda install -c conda-forge libgit2</code></p>
<h1 id="circos-plot环状热图">circos plot(环状热图)</h1>
<p><img src="https://ninjagg.github.io/Xuan.github.io//post-images/1615776514571.jpg" alt="" loading="lazy"><br>
ggplot2直接热图加极坐标转换即可</p>
<h1 id="office激活">office激活</h1>
<p>kmspico</p>
<h1 id="itol">ITOL</h1>
<p>Interactive Tree Of Life is an online tool for the display, annotation and management of phylogenetic trees.交互式生命树是一种用于显示、注释和管理系统发育树的在线工具。<img src="https://ninjagg.github.io/Xuan.github.io//post-images/1615778055094.png" alt="" loading="lazy"></p>
<h1 id="刘小乐在线书籍">刘小乐在线书籍</h1>
<p>《Introduction to Bioinformatics and Computational Biology》<br>
<a href="https://github.com/liulab-dfci/bioinfo-combio">链接</a></p>
<h1 id="biomart-r包">Biomart R包</h1>
<figure data-type="image" tabindex="1"><img src="https://ninjagg.github.io/Xuan.github.io//post-images/1615779286637.png" alt="" loading="lazy"></figure>
<h1 id="ensemble下载gtf">ensemble下载gtf</h1>
<p>只有gene name 没有gene symbol  而且gene symbol也不太可靠有别名重名 hgnc下的文件读取不进来</p>
<h1 id="hs_org包">hs_org包</h1>
<p>转换名字会丢失部分基因</p>
<h1 id="组装线粒体">组装线粒体</h1>
<p>getor ganelle</p>
<h1 id="kegg-id应该是entrez-id">KEGG ID应该是entrez id</h1>
<h1 id="更换conda源">更换Conda源</h1>
<p>查看当前conda源信息 <code>conda info</code></p>
<h3 id="清华源">清华源</h3>
<pre><code>conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/
</code></pre>
<h3 id="中科大源">中科大源</h3>
<pre><code>conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/main/
conda config --add channels https://mirrors.ustc.edu.cn/anaconda/pkgs/free/
conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/
conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/msys2/
conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/
conda config --add channels https://mirrors.ustc.edu.cn/anaconda/cloud/menpo/
conda config --set show_channel_urls yes
</code></pre>
<h3 id="北外源">北外源</h3>
<pre><code>conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/pkgs/free/ 
conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/cloud/bioconda/ 
conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/cloud/msys2/
conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/cloud/menpo/
conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/cloud/peterjc123/
conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/pkgs/main/
conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/cloud/conda-forge/
conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/cloud/pytorch/
conda config --add channels https://mirrors.bfsu.edu.cn/anaconda/pkgs/r/
conda config --set show_channel_urls yes
</code></pre>
<h1 id="改依赖库把系统弄崩溃">改依赖库把系统弄崩溃</h1>
<p>不小心删除lib64 libc.so.6软链接导致大多数命令无法运行，此时不能退系统，重新恢复该链接或许可以，一般不要动这些。</p>
<h1 id="数据作图有大量na">数据作图有大量NA</h1>
<p>①将NA替换为0直接+1取Log<br>
②<img src="https://ninjagg.github.io/Xuan.github.io//post-images/1618576176895.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://ninjagg.github.io/Xuan.github.io/post/hello-gridea/</id>
        <link href="https://ninjagg.github.io/Xuan.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>